{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/qhuy/Desktop/dev/test/react/14.nexjs-project/pages/[meetupId]/index.js\";\nimport { MongoClient } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails() {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n    title: \"A First Meetup\",\n    address: \"Some Street 5, Some City\",\n    description: \"The meetup description\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://huy:oOZ1lvcBt49zkUMP@cluster0.fgnj6.mongodb.net/meetups?retryWrites=true&w=majority', {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  });\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetupsId = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    //false will support only meetupId list in paths, true will try to fetch all meetupId\n    paths: meetupsId.map(item => ({\n      params: {\n        meetupId: item._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const client = await MongoClient.connect('mongodb+srv://huy:oOZ1lvcBt49zkUMP@cluster0.fgnj6.mongodb.net/meetups?retryWrites=true&w=majority', {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  });\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups'); //fetch data for a single meetup\n\n  const meetupId = context.params.meetupId;\n  const meetupData = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  return {\n    props: {\n      meetupData\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/qhuy/Desktop/dev/test/react/14.nexjs-project/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","getStaticPaths","client","connect","useNewUrlParser","useUnifiedTopology","db","meetupsCollection","collection","meetupsId","find","_id","toArray","close","fallback","paths","map","item","params","meetupId","toString","getStaticProps","context","meetupData","findOne","props"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,GAAyB;AACrB,sBACI,QAAC,YAAD;AACI,IAAA,KAAK,EAAC,wHADV;AAEI,IAAA,KAAK,EAAC,gBAFV;AAGI,IAAA,OAAO,EAAC,0BAHZ;AAII,IAAA,WAAW,EAAC;AAJhB;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMC,MAAM,GAAG,MAAMJ,WAAW,CAACK,OAAZ,CACjB,mGADiB,EAEjB;AAAEC,IAAAA,eAAe,EAAE,IAAnB;AAAyBC,IAAAA,kBAAkB,EAAE;AAA7C,GAFiB,CAArB;AAKA,QAAMC,EAAE,GAAGJ,MAAM,CAACI,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,SAAS,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAxB;AAEAV,EAAAA,MAAM,CAACW,KAAP;AAEA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AACc;AACjBC,IAAAA,KAAK,EAAEN,SAAS,CAACO,GAAV,CAAeC,IAAD,KAAW;AAC5BC,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAEF,IAAI,CAACN,GAAL,CAASS,QAAT;AADN;AADoB,KAAX,CAAd;AAFJ,GAAP;AAQH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC1C,QAAMpB,MAAM,GAAG,MAAMJ,WAAW,CAACK,OAAZ,CACjB,mGADiB,EAEjB;AAAEC,IAAAA,eAAe,EAAE,IAAnB;AAAyBC,IAAAA,kBAAkB,EAAE;AAA7C,GAFiB,CAArB;AAKA,QAAMC,EAAE,GAAGJ,MAAM,CAACI,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAR0C,CAU1C;;AACA,QAAMW,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMI,UAAU,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAAEb,IAAAA,GAAG,EAAEQ;AAAP,GAA1B,CAAzB;AAEA,SAAO;AACHM,IAAAA,KAAK,EAAE;AAAEF,MAAAA;AAAF;AADJ,GAAP;AAGH;AAED,eAAevB,aAAf","sourcesContent":["import { MongoClient } from 'mongodb';\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails() {\n    return (\n        <MeetupDetail\n            image=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\"\n            title=\"A First Meetup\"\n            address=\"Some Street 5, Some City\"\n            description=\"The meetup description\"\n        />\n    );\n}\n\nexport async function getStaticPaths() {\n    const client = await MongoClient.connect(\n        'mongodb+srv://huy:oOZ1lvcBt49zkUMP@cluster0.fgnj6.mongodb.net/meetups?retryWrites=true&w=majority',\n        { useNewUrlParser: true, useUnifiedTopology: true }\n    );\n\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    const meetupsId = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n    client.close();\n\n    return {\n        fallback: false, //false will support only meetupId list in paths, true will try to fetch all meetupId\n        paths: meetupsId.map((item) => ({\n            params: {\n                meetupId: item._id.toString(),\n            },\n        })),\n    };\n}\n\nexport async function getStaticProps(context) {\n    const client = await MongoClient.connect(\n        'mongodb+srv://huy:oOZ1lvcBt49zkUMP@cluster0.fgnj6.mongodb.net/meetups?retryWrites=true&w=majority',\n        { useNewUrlParser: true, useUnifiedTopology: true }\n    );\n\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    //fetch data for a single meetup\n    const meetupId = context.params.meetupId;\n\n    const meetupData = await meetupsCollection.findOne({ _id: meetupId });\n\n    return {\n        props: { meetupData },\n    };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}