{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/qhuy/Desktop/dev/test/react/14.nexjs-project/pages/[meetupId]/index.js\";\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/qhuy/Desktop/dev/test/react/14.nexjs-project/pages/[meetupId]/index.js"],"names":["MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description"],"mappings":";;AAEA,OAAOA,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,sBACI,QAAC,YAAD;AACI,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD5B;AAEI,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF5B;AAGI,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH9B;AAII,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJlC;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;KATQN,a;;AA8DT,eAAeA,aAAf","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n    return (\n        <MeetupDetail\n            image={props.meetupData.image}\n            title={props.meetupData.title}\n            address={props.meetupData.address}\n            description={props.meetupData.description}\n        />\n    );\n}\n\nexport async function getStaticPaths() {\n    const client = await MongoClient.connect(\n        'mongodb+srv://huy:oOZ1lvcBt49zkUMP@cluster0.fgnj6.mongodb.net/meetups?retryWrites=true&w=majority',\n        { useNewUrlParser: true, useUnifiedTopology: true }\n    );\n\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    const meetupsId = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n    client.close();\n\n    return {\n        fallback: false, //false will support only meetupId list in paths, true will try to fetch all meetupId\n        paths: meetupsId.map((item) => ({\n            params: {\n                meetupId: item._id.toString(),\n            },\n        })),\n    };\n}\n\nexport async function getStaticProps(context) {\n    const client = await MongoClient.connect(\n        'mongodb+srv://huy:oOZ1lvcBt49zkUMP@cluster0.fgnj6.mongodb.net/meetups?retryWrites=true&w=majority',\n        { useNewUrlParser: true, useUnifiedTopology: true }\n    );\n\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    //fetch data for a single meetup\n    const meetupId = context.params.meetupId;\n\n    const meetupData = await meetupsCollection.findOne({\n        _id: ObjectId(meetupId),\n    });\n\n    return {\n        props: {\n            meetupData: {\n                ...meetupData,\n                id: meetupData._id.toString(),\n            },\n        },\n    };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}