{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/qhuy/Desktop/dev/test/react/14.nexjs-project/pages/[meetupId]/index.js\";\nimport { Fragment } from 'react';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Add new Meetup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/qhuy/Desktop/dev/test/react/14.nexjs-project/pages/[meetupId]/index.js"],"names":["Fragment","MeetupDetail","MeetupDetails","props","meetupData","description","image","title","address"],"mappings":";;AACA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,sBACI,QAAC,QAAD;AAAA,4BACI,QAAC,IAAD;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AACI,QAAA,IAAI,EAAC,aADT;AAEI,QAAA,OAAO,EAAEA,KAAK,CAACC,UAAN,CAAiBC;AAF9B;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAQI,QAAC,YAAD;AACI,MAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAD5B;AAEI,MAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBG,KAF5B;AAGI,MAAA,OAAO,EAAEJ,KAAK,CAACC,UAAN,CAAiBI,OAH9B;AAII,MAAA,WAAW,EAAEL,KAAK,CAACC,UAAN,CAAiBC;AAJlC;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;KAlBQH,a;;AAuET,eAAeA,aAAf","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\nimport { Fragment } from 'react';\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n    return (\n        <Fragment>\n            <Head>\n                <title>Add new Meetup</title>\n                <meta\n                    name=\"description\"\n                    content={props.meetupData.description}\n                />\n            </Head>\n            <MeetupDetail\n                image={props.meetupData.image}\n                title={props.meetupData.title}\n                address={props.meetupData.address}\n                description={props.meetupData.description}\n            />\n        </Fragment>\n    );\n}\n\nexport async function getStaticPaths() {\n    const client = await MongoClient.connect(\n        'mongodb+srv://huy:oOZ1lvcBt49zkUMP@cluster0.fgnj6.mongodb.net/meetups?retryWrites=true&w=majority',\n        { useNewUrlParser: true, useUnifiedTopology: true }\n    );\n\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    const meetupsId = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n    client.close();\n\n    return {\n        fallback: false, //false will support only meetupId list in paths, true will try to fetch all meetupId\n        paths: meetupsId.map((item) => ({\n            params: {\n                meetupId: item._id.toString(),\n            },\n        })),\n    };\n}\n\nexport async function getStaticProps(context) {\n    const client = await MongoClient.connect(\n        'mongodb+srv://huy:oOZ1lvcBt49zkUMP@cluster0.fgnj6.mongodb.net/meetups?retryWrites=true&w=majority',\n        { useNewUrlParser: true, useUnifiedTopology: true }\n    );\n\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    //fetch data for a single meetup\n    const meetupId = context.params.meetupId;\n\n    const meetupData = await meetupsCollection.findOne({\n        _id: ObjectId(meetupId),\n    });\n\n    return {\n        props: {\n            meetupData: {\n                ...meetupData,\n                _id: meetupData._id.toString(),\n            },\n        },\n    };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}