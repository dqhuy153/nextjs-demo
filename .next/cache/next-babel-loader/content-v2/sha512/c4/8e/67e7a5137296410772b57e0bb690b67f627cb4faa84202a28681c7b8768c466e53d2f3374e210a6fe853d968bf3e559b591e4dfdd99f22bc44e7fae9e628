{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/qhuy/Desktop/dev/test/react/14.nexjs-project/pages/[meetupId]/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://huy:oOZ1lvcBt49zkUMP@cluster0.fgnj6.mongodb.net/meetups?retryWrites=true&w=majority', {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  });\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetupsId = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    //false will support only meetupId list in paths, true will try to fetch all meetupId\n    paths: meetupsId.map(item => ({\n      params: {\n        meetupId: item._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const client = await MongoClient.connect('mongodb+srv://huy:oOZ1lvcBt49zkUMP@cluster0.fgnj6.mongodb.net/meetups?retryWrites=true&w=majority', {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  });\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups'); //fetch data for a single meetup\n\n  const meetupId = context.params.meetupId;\n  const meetupData = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  return {\n    props: {\n      meetupData: _objectSpread(_objectSpread({}, meetupData), {}, {\n        _id: meetupData._id.toString()\n      })\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/qhuy/Desktop/dev/test/react/14.nexjs-project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","useNewUrlParser","useUnifiedTopology","db","meetupsCollection","collection","meetupsId","find","_id","toArray","close","fallback","paths","map","item","params","meetupId","toString","getStaticProps","context","findOne"],"mappings":";;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,sBACI,QAAC,YAAD;AACI,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD5B;AAEI,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF5B;AAGI,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH9B;AAII,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJlC;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACjB,mGADiB,EAEjB;AAAEC,IAAAA,eAAe,EAAE,IAAnB;AAAyBC,IAAAA,kBAAkB,EAAE;AAA7C,GAFiB,CAArB;AAKA,QAAMC,EAAE,GAAGJ,MAAM,CAACI,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,SAAS,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAxB;AAEAV,EAAAA,MAAM,CAACW,KAAP;AAEA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AACc;AACjBC,IAAAA,KAAK,EAAEN,SAAS,CAACO,GAAV,CAAeC,IAAD,KAAW;AAC5BC,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAEF,IAAI,CAACN,GAAL,CAASS,QAAT;AADN;AADoB,KAAX,CAAd;AAFJ,GAAP;AAQH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC1C,QAAMpB,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACjB,mGADiB,EAEjB;AAAEC,IAAAA,eAAe,EAAE,IAAnB;AAAyBC,IAAAA,kBAAkB,EAAE;AAA7C,GAFiB,CAArB;AAKA,QAAMC,EAAE,GAAGJ,MAAM,CAACI,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAR0C,CAU1C;;AACA,QAAMW,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMvB,UAAU,GAAG,MAAMW,iBAAiB,CAACgB,OAAlB,CAA0B;AAC/CZ,IAAAA,GAAG,EAAEnB,QAAQ,CAAC2B,QAAD;AADkC,GAA1B,CAAzB;AAIA,SAAO;AACHxB,IAAAA,KAAK,EAAE;AACHC,MAAAA,UAAU,kCACHA,UADG;AAENe,QAAAA,GAAG,EAAEf,UAAU,CAACe,GAAX,CAAeS,QAAf;AAFC;AADP;AADJ,GAAP;AAQH;AAED,eAAe1B,aAAf","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n    return (\n        <MeetupDetail\n            image={props.meetupData.image}\n            title={props.meetupData.title}\n            address={props.meetupData.address}\n            description={props.meetupData.description}\n        />\n    );\n}\n\nexport async function getStaticPaths() {\n    const client = await MongoClient.connect(\n        'mongodb+srv://huy:oOZ1lvcBt49zkUMP@cluster0.fgnj6.mongodb.net/meetups?retryWrites=true&w=majority',\n        { useNewUrlParser: true, useUnifiedTopology: true }\n    );\n\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    const meetupsId = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n    client.close();\n\n    return {\n        fallback: false, //false will support only meetupId list in paths, true will try to fetch all meetupId\n        paths: meetupsId.map((item) => ({\n            params: {\n                meetupId: item._id.toString(),\n            },\n        })),\n    };\n}\n\nexport async function getStaticProps(context) {\n    const client = await MongoClient.connect(\n        'mongodb+srv://huy:oOZ1lvcBt49zkUMP@cluster0.fgnj6.mongodb.net/meetups?retryWrites=true&w=majority',\n        { useNewUrlParser: true, useUnifiedTopology: true }\n    );\n\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    //fetch data for a single meetup\n    const meetupId = context.params.meetupId;\n\n    const meetupData = await meetupsCollection.findOne({\n        _id: ObjectId(meetupId),\n    });\n\n    return {\n        props: {\n            meetupData: {\n                ...meetupData,\n                _id: meetupData._id.toString(),\n            },\n        },\n    };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}